import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `activity_model.dart` with the code generated by Freezed
part 'activity_model.freezed.dart';
// optional: Since our activityModel class is serializable, we must add this line.
// But if activityModel was not serializable, we could skip it.
part 'activity_model.g.dart';

///Model for database activity

///Model for activity data
class TimestampConverter implements JsonConverter<DateTime, Timestamp> {
  const TimestampConverter();

  @override
  DateTime fromJson(Timestamp json) => json.toDate();

  @override
  Timestamp toJson(DateTime object) => Timestamp.fromDate(object);
}

class TimestampNullableConverter
    implements JsonConverter<DateTime?, Timestamp?> {
  const TimestampNullableConverter();

  @override
  DateTime? fromJson(Timestamp? json) => json?.toDate();

  @override
  Timestamp? toJson(DateTime? object) =>
      object == null ? null : Timestamp.fromDate(object);
}

@freezed
class ActivityModel with _$ActivityModel {
  const factory ActivityModel(
      {required String endTime,
      @TimestampConverter() DateTime? endDateTimestamp,
      @TimestampConverter() DateTime? startDateTimestamp,
      @TimestampConverter() DateTime? dateTimestamp,
      required String startTime,
      required String comment,
      required String displayName,
      required String fieldID,
      required String link,
      required String location,
      required String activityType,
      required String uid,
      required List<String> voters}) = _ActivityModel;

  factory ActivityModel.fromJson(Map<String, Object?> json) =>
      _$ActivityModelFromJson(json);
  
  factory ActivityModel.mock() {
    return ActivityModel(
      endTime: '10:00 PM',
      endDateTimestamp: DateTime(2022, 12, 31),
      startDateTimestamp: DateTime(2022, 12, 30),
      dateTimestamp: DateTime(2022, 12, 30),
      startTime: '8:00 AM',
      comment: 'Mock activity comment',
      displayName: 'Mock User',
      fieldID: '12345',
      link: 'https://example.com',
      location: 'Mock Location',
      activityType: 'Mock Activity',
      uid: 'mock_user_id',
      voters: ['user1', 'user2'],
    );
  }
}

// flutter pub run build_runner build --delete-conflicting-outputs