import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `trip_model.dart` with the code generated by Freezed
part 'trip_model.freezed.dart';
// optional: Since our ComparisonModel class is serializable, we must add this line.
// But if ComparisonModel was not serializable, we could skip it.
part 'trip_model.g.dart';

class TimestampConverter implements JsonConverter<DateTime, Timestamp> {
  const TimestampConverter();

  @override
  DateTime fromJson(Timestamp json) => json.toDate();

  @override
  Timestamp toJson(DateTime object) => Timestamp.fromDate(object);
}

class TimestampNullableConverter
    implements JsonConverter<DateTime?, Timestamp?> {
  const TimestampNullableConverter();

  @override
  DateTime? fromJson(Timestamp? json) => json?.toDate();

  @override
  Timestamp? toJson(DateTime? object) =>
      object == null ? null : Timestamp.fromDate(object);
}

class GeoPointConverter implements JsonConverter<GeoPoint, List<double>> {
  const GeoPointConverter();

  @override
  GeoPoint fromJson(List<double> json) => GeoPoint(json[0], json[1]);

  @override
  List<double> toJson(GeoPoint object) => [object.latitude, object.longitude];
}

@freezed
class Trip with _$Trip {
  const factory Trip(
      {@GeoPointConverter() GeoPoint? tripGeoPoint,
      required String comment,
      @TimestampConverter() DateTime? dateCreatedTimeStamp,
      required String displayName,
      required List<String> favorite,
      required List<String> accessUsers,
      required String documentId,
      required String endDate,
      @TimestampConverter() DateTime? endDateTimeStamp,
      required bool ispublic,
      required String tripName,
      required String location,
      required String ownerID,
      required String startDate,
      @TimestampConverter() DateTime? startDateTimeStamp,
      required String travelType,
      required String urlToImage}) = _Trip;

  factory Trip.fromJson(Map<String, Object?> json) => _$TripFromJson(json);

  factory Trip.mock() {
    return Trip(
      startDateTimeStamp: DateTime.now(),
      endDateTimeStamp: DateTime.now(),
        comment: 'comment',
        displayName: 'displayName',
        favorite: [],
        accessUsers: [],
        documentId: 'documentId',
        endDate: 'endDate',
        ispublic: true,
        tripName: 'tripName',
        location: 'location',
        ownerID: 'ownerID',
        startDate: 'startDate',
        travelType: 'travelType',
        urlToImage: 'urlToImage');
  }
}
